
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.18.0
 * Query Engine version: 34b5a692b7bd79939a9a2c3ef97d816e749cda2f
 */
Prisma.prismaVersion = {
  client: "6.18.0",
  engine: "34b5a692b7bd79939a9a2c3ef97d816e749cda2f"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UsersScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  password: 'password',
  role: 'role',
  status: 'status',
  created_at: 'created_at'
};

exports.Prisma.EventsScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  category: 'category',
  location: 'location',
  start_date: 'start_date',
  end_date: 'end_date',
  max_participants: 'max_participants',
  created_by: 'created_by',
  approved_by: 'approved_by',
  status: 'status',
  created_at: 'created_at'
};

exports.Prisma.Event_registrationsScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  event_id: 'event_id',
  status: 'status',
  completed: 'completed',
  registered_at: 'registered_at',
  canceled_at: 'canceled_at'
};

exports.Prisma.NotificationsScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  event_id: 'event_id',
  message: 'message',
  type: 'type',
  is_read: 'is_read',
  created_at: 'created_at'
};

exports.Prisma.PostsScalarFieldEnum = {
  id: 'id',
  event_id: 'event_id',
  user_id: 'user_id',
  content: 'content',
  created_at: 'created_at'
};

exports.Prisma.CommentsScalarFieldEnum = {
  id: 'id',
  post_id: 'post_id',
  user_id: 'user_id',
  content: 'content',
  created_at: 'created_at'
};

exports.Prisma.LikesScalarFieldEnum = {
  id: 'id',
  post_id: 'post_id',
  user_id: 'user_id',
  created_at: 'created_at'
};

exports.Prisma.Post_mediaScalarFieldEnum = {
  id: 'id',
  post_id: 'post_id',
  file_url: 'file_url',
  file_type: 'file_type',
  created_at: 'created_at'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.Role = exports.$Enums.Role = {
  VOLUNTEER: 'VOLUNTEER',
  EVENT_MANAGER: 'EVENT_MANAGER',
  ADMIN: 'ADMIN'
};

exports.UserStatus = exports.$Enums.UserStatus = {
  ACTIVE: 'ACTIVE',
  LOCKED: 'LOCKED'
};

exports.EventStatus = exports.$Enums.EventStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  COMPLETED: 'COMPLETED'
};

exports.RegistrationStatus = exports.$Enums.RegistrationStatus = {
  PENDING: 'PENDING',
  REJECTED: 'REJECTED',
  REGISTERED: 'REGISTERED'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  REGISTRATION: 'REGISTRATION',
  COMPLETION: 'COMPLETION',
  SYSTEM: 'SYSTEM'
};

exports.PostMediaType = exports.$Enums.PostMediaType = {
  IMAGE: 'IMAGE',
  VIDEO: 'VIDEO'
};

exports.Prisma.ModelName = {
  Users: 'Users',
  Events: 'Events',
  Event_registrations: 'Event_registrations',
  Notifications: 'Notifications',
  Posts: 'Posts',
  Comments: 'Comments',
  Likes: 'Likes',
  Post_media: 'Post_media'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "D:\\code_app\\intellijUltimate\\VolunteerHub\\VolunteerHub_be\\generated\\prisma",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "windows",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "D:\\code_app\\intellijUltimate\\VolunteerHub\\VolunteerHub_be\\prisma\\schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../.env"
  },
  "relativePath": "../../prisma",
  "clientVersion": "6.18.0",
  "engineVersion": "34b5a692b7bd79939a9a2c3ef97d816e749cda2f",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\n// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?\n// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init\n\ngenerator client {\n  provider = \"prisma-client-js\"\n  output   = \"../generated/prisma\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nenum Role {\n  VOLUNTEER     @map(\"volunteer\")\n  EVENT_MANAGER @map(\"event_manager\")\n  ADMIN         @map(\"admin\")\n}\n\nenum UserStatus {\n  ACTIVE @map(\"active\")\n  LOCKED @map(\"locked\")\n}\n\nenum EventStatus {\n  PENDING   @map(\"pending\")\n  APPROVED  @map(\"approved\")\n  REJECTED  @map(\"rejected\")\n  COMPLETED @map(\"completed\")\n}\n\nenum RegistrationStatus {\n  PENDING    @map(\"pending\")\n  REJECTED   @map(\"rejected\")\n  REGISTERED @map(\"registered\")\n}\n\nenum NotificationType {\n  REGISTRATION @map(\"registration\")\n  COMPLETION   @map(\"completion\")\n  SYSTEM       @map(\"system\")\n}\n\nenum PostMediaType {\n  IMAGE @map(\"image\")\n  VIDEO @map(\"video\")\n}\n\nmodel Users {\n  id         Int        @id @default(autoincrement())\n  name       String\n  email      String     @unique\n  password   String\n  role       Role       @default(VOLUNTEER)\n  status     UserStatus @default(ACTIVE)\n  created_at DateTime   @default(now())\n\n  // relations\n  events_created  Events[]              @relation(\"events_created_by\")\n  events_approved Events[]              @relation(\"events_approved_by\")\n  registrations   Event_registrations[]\n  notifications   Notifications[]\n  posts           Posts[]\n  comments        Comments[]\n  likes           Likes[]\n\n  @@map(\"Users\")\n}\n\nmodel Events {\n  id               Int         @id @default(autoincrement())\n  title            String\n  description      String?\n  category         String?\n  location         String\n  start_date       DateTime\n  end_date         DateTime\n  max_participants Int?\n  created_by       Int?\n  approved_by      Int?\n  status           EventStatus @default(PENDING)\n  created_at       DateTime    @default(now())\n\n  // relations\n  creator       Users?                @relation(\"events_created_by\", fields: [created_by], references: [id], onDelete: SetNull)\n  approver      Users?                @relation(\"events_approved_by\", fields: [approved_by], references: [id], onDelete: SetNull)\n  registrations Event_registrations[]\n  notifications Notifications[]\n  posts         Posts[]\n\n  @@map(\"Events\")\n}\n\nmodel Event_registrations {\n  id            Int                @id @default(autoincrement())\n  user_id       Int\n  event_id      Int\n  status        RegistrationStatus @default(PENDING)\n  completed     Boolean            @default(false)\n  registered_at DateTime           @default(now())\n  canceled_at   DateTime?\n\n  // relations\n  user  Users  @relation(fields: [user_id], references: [id], onDelete: Cascade)\n  event Events @relation(fields: [event_id], references: [id], onDelete: Cascade)\n\n  @@map(\"Event_registrations\")\n}\n\nmodel Notifications {\n  id         Int              @id @default(autoincrement())\n  user_id    Int\n  event_id   Int?\n  message    String\n  type       NotificationType @default(SYSTEM)\n  is_read    Boolean          @default(false)\n  created_at DateTime         @default(now())\n\n  // relations\n  user  Users   @relation(fields: [user_id], references: [id], onDelete: Cascade)\n  event Events? @relation(fields: [event_id], references: [id], onDelete: Cascade)\n\n  @@map(\"Notifications\")\n}\n\nmodel Posts {\n  id         Int      @id @default(autoincrement())\n  event_id   Int\n  user_id    Int\n  content    String\n  created_at DateTime @default(now())\n\n  // relations\n  event    Events       @relation(fields: [event_id], references: [id], onDelete: Cascade)\n  author   Users        @relation(fields: [user_id], references: [id], onDelete: Cascade)\n  comments Comments[]\n  likes    Likes[]\n  media    Post_media[]\n\n  @@map(\"Posts\")\n}\n\nmodel Comments {\n  id         Int      @id @default(autoincrement())\n  post_id    Int\n  user_id    Int\n  content    String   @db.Text\n  created_at DateTime @default(now())\n\n  // relations\n  post Posts @relation(fields: [post_id], references: [id], onDelete: Cascade)\n  user Users @relation(fields: [user_id], references: [id], onDelete: Cascade)\n\n  @@map(\"Comments\")\n}\n\nmodel Likes {\n  id         Int      @id @default(autoincrement())\n  post_id    Int\n  user_id    Int\n  created_at DateTime @default(now())\n\n  // relations\n  post Posts @relation(fields: [post_id], references: [id], onDelete: Cascade)\n  user Users @relation(fields: [user_id], references: [id], onDelete: Cascade)\n\n  @@unique([post_id, user_id], name: \"likes_index_0\")\n  @@map(\"Likes\")\n}\n\nmodel Post_media {\n  id         Int           @id @default(autoincrement())\n  post_id    Int\n  file_url   String?\n  file_type  PostMediaType @default(IMAGE)\n  created_at DateTime      @default(now())\n\n  // relations\n  post Posts @relation(fields: [post_id], references: [id], onDelete: Cascade)\n\n  @@map(\"Post_media\")\n}\n",
  "inlineSchemaHash": "3f729a849afaba2a38818ecaefc4ee8dce3a7c29345e7013d04ed68adc318458",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"Users\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"password\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"role\",\"kind\":\"enum\",\"type\":\"Role\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"UserStatus\"},{\"name\":\"created_at\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"events_created\",\"kind\":\"object\",\"type\":\"Events\",\"relationName\":\"events_created_by\"},{\"name\":\"events_approved\",\"kind\":\"object\",\"type\":\"Events\",\"relationName\":\"events_approved_by\"},{\"name\":\"registrations\",\"kind\":\"object\",\"type\":\"Event_registrations\",\"relationName\":\"Event_registrationsToUsers\"},{\"name\":\"notifications\",\"kind\":\"object\",\"type\":\"Notifications\",\"relationName\":\"NotificationsToUsers\"},{\"name\":\"posts\",\"kind\":\"object\",\"type\":\"Posts\",\"relationName\":\"PostsToUsers\"},{\"name\":\"comments\",\"kind\":\"object\",\"type\":\"Comments\",\"relationName\":\"CommentsToUsers\"},{\"name\":\"likes\",\"kind\":\"object\",\"type\":\"Likes\",\"relationName\":\"LikesToUsers\"}],\"dbName\":\"Users\"},\"Events\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"category\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"location\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"start_date\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"end_date\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"max_participants\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"created_by\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"approved_by\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"EventStatus\"},{\"name\":\"created_at\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"creator\",\"kind\":\"object\",\"type\":\"Users\",\"relationName\":\"events_created_by\"},{\"name\":\"approver\",\"kind\":\"object\",\"type\":\"Users\",\"relationName\":\"events_approved_by\"},{\"name\":\"registrations\",\"kind\":\"object\",\"type\":\"Event_registrations\",\"relationName\":\"Event_registrationsToEvents\"},{\"name\":\"notifications\",\"kind\":\"object\",\"type\":\"Notifications\",\"relationName\":\"EventsToNotifications\"},{\"name\":\"posts\",\"kind\":\"object\",\"type\":\"Posts\",\"relationName\":\"EventsToPosts\"}],\"dbName\":\"Events\"},\"Event_registrations\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"user_id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"event_id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"RegistrationStatus\"},{\"name\":\"completed\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"registered_at\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"canceled_at\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"Users\",\"relationName\":\"Event_registrationsToUsers\"},{\"name\":\"event\",\"kind\":\"object\",\"type\":\"Events\",\"relationName\":\"Event_registrationsToEvents\"}],\"dbName\":\"Event_registrations\"},\"Notifications\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"user_id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"event_id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"message\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"enum\",\"type\":\"NotificationType\"},{\"name\":\"is_read\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"created_at\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"Users\",\"relationName\":\"NotificationsToUsers\"},{\"name\":\"event\",\"kind\":\"object\",\"type\":\"Events\",\"relationName\":\"EventsToNotifications\"}],\"dbName\":\"Notifications\"},\"Posts\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"event_id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"user_id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"content\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"created_at\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"event\",\"kind\":\"object\",\"type\":\"Events\",\"relationName\":\"EventsToPosts\"},{\"name\":\"author\",\"kind\":\"object\",\"type\":\"Users\",\"relationName\":\"PostsToUsers\"},{\"name\":\"comments\",\"kind\":\"object\",\"type\":\"Comments\",\"relationName\":\"CommentsToPosts\"},{\"name\":\"likes\",\"kind\":\"object\",\"type\":\"Likes\",\"relationName\":\"LikesToPosts\"},{\"name\":\"media\",\"kind\":\"object\",\"type\":\"Post_media\",\"relationName\":\"Post_mediaToPosts\"}],\"dbName\":\"Posts\"},\"Comments\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"post_id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"user_id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"content\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"created_at\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"post\",\"kind\":\"object\",\"type\":\"Posts\",\"relationName\":\"CommentsToPosts\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"Users\",\"relationName\":\"CommentsToUsers\"}],\"dbName\":\"Comments\"},\"Likes\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"post_id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"user_id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"created_at\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"post\",\"kind\":\"object\",\"type\":\"Posts\",\"relationName\":\"LikesToPosts\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"Users\",\"relationName\":\"LikesToUsers\"}],\"dbName\":\"Likes\"},\"Post_media\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"post_id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"file_url\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"file_type\",\"kind\":\"enum\",\"type\":\"PostMediaType\"},{\"name\":\"created_at\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"post\",\"kind\":\"object\",\"type\":\"Posts\",\"relationName\":\"Post_mediaToPosts\"}],\"dbName\":\"Post_media\"}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

